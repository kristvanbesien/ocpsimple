- name: Provision hosts
  hosts: localhost
  connection: local
  gather_facts: False
  tags: 
  - provision

  tasks:
  - name: find out id of default vpc
    ec2_vpc_net_facts:
      region: "{{ my_region }}"
      filters:
        "tag:Name": "Default-{{ my_region }}"
    register: default_vpc
    tags: 
    - prepare
    
  - name: find out ids of subnets
    ec2_vpc_subnet_facts:
      region: "{{ my_region }}"
      filters:
        vpc-id: '{{ default_vpc.vpcs.0.id }}'
    register: default_vpc_subnets
    tags: 
    - prepare

  - name: find Atomic AMI
    ec2_ami_find:
      region: "{{ my_region }}"
      name: "RHEL-Atomic*"
      sort: name
      sort_order: descending
      sort_end: 1
    register: atomic_ami
    tags: 
    - prepare


  - name: Ensure OCP Security Group is present
    ec2_group:
      name: OCP
      description: Openshift 
      region: "{{ my_region }}"
      vpc_id: '{{ default_vpc.vpcs.0.id }}'
      rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8443
        to_port: 8443
        cidr_ip: 0.0.0.0/0
      rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
    tags: 
    - prepare
  
  - name: spawn ocp nodes
    ec2:
      key_name: me 
      group: "{{ item.group }}"
      instance_type: m4.xlarge
      image: "{{ atomic_ami.results.0.ami_id }}"
      region: "{{ my_region }}"
      wait: yes
      wait_timeout: 500
      count_tag:
        Name: "{{ item.name }}"
      instance_tags:
        Name: "{{ item.name }}"
        role: ocp
        ocp_role: "{{ item.role }}"
        ocp_cluster: one
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 20
          delete_on_termination: True
      vpc_subnet_id: "{{ item.vpc_subnet_id }}"
      assign_public_ip: "{{ item.assign_public_ip }}"
    with_items:
    - name: ocpmaster
      group: ["OCP","default"]
      role: master
      assign_public_ip: yes
      vpc_subnet_id: "{{ default_vpc_subnets.subnets.0.id }}"
    - name: ocpinfra
      group: ["OCP","default"]
      role: infra
      assign_public_ip: yes
      vpc_subnet_id: "{{ default_vpc_subnets.subnets.0.id }}"
    - name: node01
      group: default
      role: node
      assign_public_ip: no
      vpc_subnet_id: "{{ default_vpc_subnets.subnets.0.id }}"
    - name: node02
      group: default
      role: node
      assign_public_ip: no
      vpc_subnet_id: "{{ default_vpc_subnets.subnets.1.id }}"
    - name: node03
      group: default
      role: node
      assign_public_ip: no
      vpc_subnet_id: "{{ default_vpc_subnets.subnets.2.id }}"
    tags: 
    - ocp
      

  - name: spawn storage nodes
    ec2:
      key_name: me 
      group: "{{ item.group }}"
      instance_type: m4.xlarge
      image: "{{ atomic_ami.results.0.ami_id }}"
      region: "{{ my_region }}"
      wait: yes
      wait_timeout: 500
      count_tag:
        Name: "{{ item.name }}"
      instance_tags:
        Name: "{{ item.name }}"
        role: ocp
        ocp_role: "{{ item.role }}"
        ocp_cluster: one
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 20
          delete_on_termination: True
        - device_name: /dev/sdb
          volume_type: gp2
          volume_size: 100
          delete_on_termination: True
      vpc_subnet_id: "{{ item.vpc_subnet_id }}"
      assign_public_ip: "{{ item.assign_public_ip }}"
    with_items:
    - name: store01
      group: default
      role: storage
      assign_public_ip: no
      vpc_subnet_id: "{{ default_vpc_subnets.subnets.0.id }}"
    - name: store02
      group: default
      role: storage
      assign_public_ip: no
      vpc_subnet_id: "{{ default_vpc_subnets.subnets.1.id }}"
    - name: store03
      group: default
      role: storage
      assign_public_ip: no
      vpc_subnet_id: "{{ default_vpc_subnets.subnets.2.id }}"
    tags: 
    - storage

